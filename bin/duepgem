#!/usr/bin/env ruby

require 'cmdparse'
require 'yaml'
require 'active_record'
require "#{File.dirname(__FILE__)}/../lib/due_payments/autoload"

module DuePaymentCli

  ROOT_DIR = File.realpath("#{File.dirname(__FILE__)}/..")

  parser = CmdParse::CommandParser.new(handle_exceptions: :no_help)

  # information about my command line program
  parser.main_options.program_name = "duepgem - DuePayment system library"
  parser.main_options.version = DuePayments::VERSION
  # parser.main_options.banner = "This a command line system to help you manipulate a Due Payment system from any Ruby Project"

  # Default command
  parser.add_command(CmdParse::HelpCommand.new, default: true)
  parser.add_command(CmdParse::VersionCommand.new, default: false)



  # Command to create the default database architecture
  class ConfigureCommand < CmdParse::Command

    def initialize
      super('configure', takes_commands: false)
      short_desc("Configure your project and configure your database.")
      long_desc("Configure your project and configure your database.")

      # default data
      self.data[:env] = 'development'
      self.data[:database_configuration] = ''

      # Our custom environment
      options.on('-e', '--environment [ENV]', String, 'Application Environnement') { |env| self.data[:env] = env }
      options.on('-f', '--config [FILE]', String, 'Configuration File') { |file| self.data[:config_file] = file }
    end

    def execute()
      
      puts "=========> Start Configuration"

      puts "==> Verify configuration"
      verify
      puts "==> End verify configuration"

      puts "==> Install the environment"
      puts "Current Environment configuration :  #{self.data[:env]}"
      install_database
      puts "==> End of the installation"

      puts "=========> End configuration"

    end

    private
    
    def verify
      # TODO : verify that the prequisite is here
      nil
    end
    
    def install_database
      db_config = YAML::load(File.open("config/database.yml"))[self.data[:env]]
      ActiveRecord::Base.establish_connection(db_config)
      ActiveRecord::Migrator.migrate("#{ROOT_DIR}/db/migrate/")

      require 'active_record/schema_dumper'
      filename = "db/schema.rb"
      File.open(filename, "w:utf-8") do |file|
        ActiveRecord::SchemaDumper.dump(ActiveRecord::Base.connection, file)
      end

      puts "Migration Done ..."
    end

  end


  # Command Init
  class InitCommand < CmdParse::Command

    def initialize
      super('init', takes_commands: false)
      short_desc("Create the default file needed for the database")
      long_desc("Create the default file needed for the database. It will configure your current project with db and config directory. It based on active directory.")
    end

    def execute
      # TODO : Remove status
    end

  end

  class DebugCommand < CmdParse::Command

    def initialize
      super('debug', takes_commands: false)
      short_desc("Help debug this application")
      long_desc("This command is too debug on a idea")
    end

    def execute
      require 'pp'
      DuePayments::Data::DPMRecordBase.configure
      estate1 = DuePayments::Estate.find(1)
      estate2 = DuePayments::Estate.find(2)
      estate3 = DuePayments::Estate.find(3)
      
      reminder = Reminder.find(1)
      reminder.on(DateTime.now + 60.days, estate1)
      nil
    end

  end


  class DestroyCommand < CmdParse::Command

    def initialize
      super('destroy', takes_commands: false)
      short_desc("Destroy the current database")
      long_desc("Destroy the current database configuration")
    end

    def execute
      # TODO : implement it please
      puts "Not implemented yet ..."
    end

  end

  parser.add_command(ConfigureCommand.new, default: false)
  parser.add_command(InitCommand.new, default: false)
  parser.add_command(DestroyCommand.new, default: false)
  parser.add_command(DebugCommand.new, default: false)

  # TODO : Create a destroy command ...
















  parser.parse


end
